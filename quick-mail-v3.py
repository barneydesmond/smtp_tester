#!/usr/bin/python

"""
Uses standard python libraries to make an email and send it.

This is the third revision of this script, we now attach a bunch of MIME
attachments to make the mail more interesting and structured. No HTML or
anything fancy, but it should look decent in your mail client.

Written targeting Python 2, sometime in 2008. <barney@anchor.net.au>
"""

import smtplib
import datetime
from optparse import OptionParser

from email.mime.application import MIMEApplication
from email.mime.image import MIMEImage
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText

parser = OptionParser()
parser.add_option("-n", type="int", dest="howmany", default=1, help="Specify how many messages to send")
parser.add_option("--from", dest="fromaddr", default='barney@anchor.net.au', help="What email address should the message appear to come from")
parser.add_option("--to", dest="toaddr", default='johnny@example.com', help="Who should the email be addressed to")
parser.add_option("--host", "--server", dest="server", default='mail.example.com', help="Specify the SMTP server to connect to")
parser.add_option("-p", "--port", type="int", dest="port", default=25, help="What port should the SMTP server be contacted on")
(options, args) = parser.parse_args()

TIMESTAMP = datetime.datetime.now().ctime()
FROM        = options.fromaddr
TO          = options.toaddr
SMTP_SERVER = options.server
SMTP_PORT   = options.port


# setup the message
mail = MIMEMultipart()
mail['Subject'] = 'Test message from test mailer - run started at %s' % TIMESTAMP
mail['From'] = FROM
mail['To'] = TO
MESSAGE_BODY = '''This is a test message.

This email is a MIME multipart message with five segments.

1. This plaintext body
2. An MS Word document attachment
3. A 2-page PDF document containing the text of an RFC style
4. A ZIP archive containing three scanned pages from a book about Zope
5. A JPEG image of a book cover, some clients (Horde included) choose to
   render this on the page instead of linking it as an attachment

We're putting in some content to bulk up the body a bit. This is some of the
Python documentation about the SMTP libraries, used in this script.


The smtplib module defines an SMTP client session object that can be used to
send mail to any Internet machine with an SMTP or ESMTP listener daemon. For 
details of SMTP and ESMTP operation, consult RFC 821 (Simple Mail Transfer 
Protocol) and RFC 1869 (SMTP Service Extensions).

class SMTP(     [host[, port[, local_hostname]]])
    A SMTP instance encapsulates an SMTP connection. It has methods that 
support a full repertoire of SMTP and ESMTP operations. If the optional host 
and port parameters are given, the SMTP connect() method is called with those 
parameters during initialization. An SMTPConnectError is raised if the 
specified host doesn't respond correctly.

    For normal use, you should only require the initialization/connect, 
sendmail(), and quit() methods. An example is included below. 

A nice selection of exceptions is defined as well:

-- This has been an autogenerated test mail --

'''
txt = MIMEText(MESSAGE_BODY)
mail.attach(txt)


# attach the Word document
doc = MIMEApplication(open('test_document.doc', 'rb').read(), 'msword')
mail.attach(doc)

# attach the PDF document
pdf = MIMEApplication(open('rfc.pdf', 'rb').read(), 'pdf')
mail.attach(pdf)

# attach the ZIP file
zipfile = MIMEApplication(open('zope_pages.zip', 'rb').read(), 'zip')
mail.attach(zipfile)

# attach the image
img = MIMEImage(open('Kyoukai01.jpg', 'rb').read())
mail.attach(img)


# send it
mailer = smtplib.SMTP()
mailer.connect(SMTP_SERVER, SMTP_PORT) # localhost:25 is the default
for i in range(options.howmany):
	mailer.sendmail(FROM, TO, mail.as_string())
	print i
mailer.close()
